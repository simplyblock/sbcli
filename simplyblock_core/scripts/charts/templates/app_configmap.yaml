---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-config
  namespace: {{ .Release.Namespace }}

data:
  LOG_LEVEL: {{ .Values.log.level }}
  FDB_CLUSTER_FILE_CONTENTS: {{ .Values.foundationdb.fdbClusterFileContent }}
  LOG_DELETION_INTERVAL: {{ .Values.log.deletionInterval }}

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-fluent-bit-config
  namespace: {{ .Release.Namespace }}
data:
  fluent-bit.conf: |
    [SERVICE]
        Flush        1
        Daemon       Off
        Log_Level    info
        Parsers_File parsers.conf

    [INPUT]
        Name              tail
        Path              /var/log/containers/*.log
        Parser            docker
        Tag               kube.*
        Refresh_Interval  5
        Mem_Buf_Limit     5MB
        Skip_Long_Lines   On
        DB                /var/log/flb_kube.db

    [FILTER]
        Name                kubernetes
        Match               kube.*
        Kube_URL            https://kubernetes.default.svc:443
        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token
        Merge_Log           On
        Merge_Log_Key       log
        K8S-Logging.Parser  On
        K8S-Logging.Exclude Off

    [FILTER]
        Name      lua
        Match     kube.*
        script    filter.lua
        call      filter_tagged_pods

    [OUTPUT]
        Name          gelf
        Match         *
        Host          simplyblock-graylog
        Port          12201
        Mode          tcp
        Gelf_Short_Message_Key log

  parsers.conf: |
    [PARSER]
        Name        docker
        Format      json
        Time_Key    time
        Time_Format %Y-%m-%dT%H:%M:%S.%L
        Time_Keep   On

  filter.lua: |
    function filter_tagged_pods(tag, timestamp, record)
        annotations = record["kubernetes"]["annotations"]
        if annotations ~= nil and annotations["log-collector/enabled"] == "true" then
            return 1, record
        end
        return -1, record
    end

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-tcp-services
  namespace: {{ .Release.Namespace }}
data:
  "12202": "{{ .Release.Namespace }}/simplyblock-graylog:12201"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: simplyblock-fdb-entrypoint-script
  namespace: {{ .Release.Namespace }}
data:
  fdb.bash: |
    #!/bin/bash

    function create_cluster_file() {
        FDB_CLUSTER_FILE=${FDB_CLUSTER_FILE:-/etc/foundationdb/fdb.cluster}
        mkdir -p "$(dirname $FDB_CLUSTER_FILE)"

        if [[ -n "$FDB_CLUSTER_FILE_CONTENTS" ]]; then
            echo "$FDB_CLUSTER_FILE_CONTENTS" > "$FDB_CLUSTER_FILE"
        elif [[ -n $FDB_COORDINATOR ]]; then
            coordinator_ip=$(dig +short "$FDB_COORDINATOR")
            if [[ -z "$coordinator_ip" ]]; then
                echo "Failed to look up coordinator address for $FDB_COORDINATOR" 1>&2
                exit 1
            fi
            coordinator_port=${FDB_COORDINATOR_PORT:-4500}
            echo "docker:docker@$coordinator_ip:$coordinator_port" > "$FDB_CLUSTER_FILE"
        else
            echo "FDB_COORDINATOR environment variable not defined" 1>&2
            exit 1
        fi
    }

    function create_server_environment() {
        env_file=/var/fdb/.fdbenv

        if [[ "$FDB_NETWORKING_MODE" == "host" ]]; then
            public_ip=127.0.0.1
        elif [[ "$FDB_NETWORKING_MODE" == "container" ]]; then
            public_ip=${PUBLIC_IP:-$(hostname -i | awk '{print $1}')}
        else
            echo "Unknown FDB Networking mode \"$FDB_NETWORKING_MODE\"" 1>&2
            exit 1
        fi

        echo "export PUBLIC_IP=$public_ip" > $env_file
        if [[ -z $FDB_COORDINATOR && -z "$FDB_CLUSTER_FILE_CONTENTS" ]]; then
            FDB_CLUSTER_FILE_CONTENTS="docker:docker@$PUBLIC_IP:$FDB_PORT"
        fi

        create_cluster_file
    }

    create_server_environment
    source /var/fdb/.fdbenv
    echo "Starting FDB server on $PUBLIC_IP:$FDB_PORT"
    fdbserver --listen-address 0.0.0.0:"$FDB_PORT" --public-address "$PUBLIC_IP:$FDB_PORT" \
        --datadir /var/fdb/data --logdir /var/fdb/logs \
        --locality-zoneid="$(hostname)" --locality-machineid="$(hostname)" --class "$FDB_PROCESS_CLASS"
