name: End-to-end test docker

on:
  push:
    branches:
      - main
      - R*-PRE
      - R*-Hotfix

  workflow_dispatch:
    inputs:
      cluster:
        default: c141
        description: "Cluster to deploy on"
        required: true
        type: string
      sbcli_cmd:
        description: 'Command for sbcli execution'
        required: true
        default: 'sbcli-dev'
      ndcs:
        description: 'Value for NDCS'
        required: false
        default: 1
      npcs:
        description: 'Value for NPCS'
        required: false
        default: 1
      bs:
        description: 'Value for Block size'
        required: false
        default: 4096
      chunk_bs:
        description: 'Value for Chunk block size'
        required: false
        default: 4096
      send_slack_notification:
        description: 'Send Slack notification?'
        required: false
        default: true
        type: boolean
      run_ha_test:
        description: 'Run HA tests or not'
        required: false
        default: true
        type: boolean
      test_case_to_run:
        description: 'Specific test case to run (leave empty to run all)'
        required: false
        type: string

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  cleanup:
    runs-on: self-hosted
    steps:
      - name: Checkout deployment tooling
        uses: actions/checkout@v4
        with:
          repository: simplyblock-io/simplyBlockDeploy
          path: deploy

      - name: cleanup cluster
        timeout-minutes: 15
        run: |
          cd deploy/bare-metal
          cluster="${{ inputs.cluster || 'c141' }}"
          cluster="${cluster:1}"
          echo "cleaning up cluster $cluster"
          KEY="~/.ssh/simplyblock-us-east-2.pem"
          eval $(python3 inventory.py inventory/c${cluster}.yml)
          ssh -i $KEY -o StrictHostKeyChecking=no root@192.168.10.1 "bash proxmox_script.sh cluster_${cluster}"

  deploy:
    needs: cleanup
    uses: ./.github/workflows/bare-metal-deploy.yml
    with:
      runs_on: self-hosted
      cluster: ${{ inputs.cluster || 'c141' }}
      docker_image: simplyblock/simplyblock:${{ github.head_ref || github.ref_name }}
      sbcli_source: ${{ github.head_ref || github.ref_name }}
      ndcs: ${{ github.event.inputs.ndcs }}
      npcs: ${{ github.event.inputs.npcs }}
      bs: ${{ github.event.inputs.bs }}
      chunk_bs: ${{ github.event.inputs.chunk_bs }}

  e2e:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set send_slack_notification for scheduled and push events
        if: github.event_name == 'schedule' || github.event_name == 'push'
        run: echo "send_slack_notification=true" >> $GITHUB_ENV

      - name: Set send_slack_notification for manual workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        run: echo "send_slack_notification=${{ github.event.inputs.send_slack_notification }}" >> $GITHUB_ENV

      - name: Record Test Start Time
        run: echo "TEST_START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Setup Tests & Run Tests
        timeout-minutes: 120
        run: |
          cd $GITHUB_WORKSPACE/e2e
          pip install virtualenv
          python3 -m venv myenv
          source myenv/bin/activate
          python3 -m pip install -r requirements.txt
          echo "Running tests in namespace default"
          export CLUSTER_ID=${{ needs.deploy.outputs.cluster_id }}
          export CLUSTER_SECRET=${{ needs.deploy.outputs.cluster_secret }}
          export CLUSTER_IP=${{ needs.deploy.outputs.cluster_ip }}
          export API_BASE_URL=${{ needs.deploy.outputs.cluster_ip }}
          export KEY_NAME="simplyblock-us-east-2.pem" 
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          export SSH_USER=root
          export SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          TEST_CASE=${{ inputs.test_case_to_run || '' }}
          python3 e2e.py ${TEST_CASE:+--testname} ${TEST_CASE} \
                  --ndcs $NDCS --npcs $NPCS --bs $BS --chunk_bs $CHUNK_BS --run_ha ${{ github.event.inputs.run_ha_test || true }}
        env:
          NDCS: ${{ github.event.inputs.ndcs || 1 }}
          NPCS: ${{ github.event.inputs.npcs || 1 }}
          BS: ${{ github.event.inputs.bs || 4096 }}
          CHUNK_BS: ${{ github.event.inputs.chunk_bs || 4096 }}
          SBCLI_CMD: ${{ github.event.inputs.sbcli_cmd || 'sbctl' }}

      - name: Record Test End Time
        if: always()
        run: echo "TEST_END_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Calculate Total Time Taken
        if: always()
        run: |
          TEST_TIME=$(($TEST_END_TIME - $TEST_START_TIME))
          TEST_TIME_HOURS=$(($TEST_TIME / 3600))
          TEST_TIME_MINS=$((($TEST_TIME % 3600) / 60))
          TEST_TIME_SECS=$(($TEST_TIME % 60))
          echo "Test runtime: ${TEST_TIME_HOURS}h ${TEST_TIME_MINS}m ${TEST_TIME_SECS}s"
          echo "TEST_TIME_HOURS=$TEST_TIME_HOURS" >> $GITHUB_ENV
          echo "TEST_TIME_MINS=$TEST_TIME_MINS" >> $GITHUB_ENV
          echo "TEST_TIME_SECS=$TEST_TIME_SECS" >> $GITHUB_ENV

      - name: Upload automation and docker logs to miniio
        run: |
          cd $GITHUB_WORKSPACE/e2e/
          python3 logs/upload_logs_to_miniio.py
        if: always()
        env:
          GITHUB_RUN_ID: ${{ github.run_id }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
          MNODES: "${{ needs.deploy.outputs.mnodes }}"
          STORAGE_PRIVATE_IPS: "${{ needs.deploy.outputs.storage_private_ips }}"
          USER: "root"

      - name: Parse test results
        if: always() && (github.event_name == 'schedule' || env.send_slack_notification == 'true')
        id: parse_results
        run: |
          cd $GITHUB_WORKSPACE/e2e/logs
          echo "Looking for the latest non-empty log file..."
          # Find the latest non-empty log file
          COUNTER=0
          MAX_ATTEMPTS=10
          while [ $COUNTER -lt $MAX_ATTEMPTS ]; do
            LATEST_LOG=$(ls -t *.log | head -n 1)
            if [ -s "$LATEST_LOG" ]; then
              echo "Found non-empty log file: $LATEST_LOG"
              break
            fi
            echo "Attempt $((COUNTER + 1)): No non-empty log file found. Retrying..."
            COUNTER=$((COUNTER + 1))
            sleep 1  # Add a small delay to avoid rapid looping
          done
          if [ ! -s "$LATEST_LOG" ]; then
            echo "No non-empty log file found after $MAX_ATTEMPTS attempts"
            exit 1
          fi
          echo "Parsing the identified log file: $LATEST_LOG"
          # Parse the identified log file
          echo "Total tests"
          TOTAL_TESTS=$(grep -i "Number of Total Cases" "$LATEST_LOG" | awk '{print $NF}')
          echo "number Passed tests"
          PASSED_TESTS=$(grep -i "Number of Passed Cases" "$LATEST_LOG" | awk '{print $NF}')
          echo "number Failed tests"
          FAILED_TESTS=$(grep -i "Number of Failed Cases" "$LATEST_LOG" | awk '{print $NF}')
          echo "number Skipped tests"
          SKIPPED_TESTS=$(grep -i "Number of Skipped Cases" "$LATEST_LOG" | awk '{print $NF}')
          echo "List Passed tests"
          PASSED_CASES=$(grep "PASSED CASE" "$LATEST_LOG" | awk -F 'INFO - | FAILED CASE' '{print $2}')
          echo "List Failed tests"
          FAILED_CASES=$(grep "FAILED CASE" "$LATEST_LOG" | awk -F 'INFO - | SKIPPED CASE' '{print $2}')
          echo "List Skipped tests"
          SKIPPED_CASES=$(grep "SKIPPED CASE" "$LATEST_LOG" | awk -F 'INFO - | SKIPPED CASE' '{print $2}')
          # Format passed and failed cases as bullet points
          echo "Adding PASSED cases with bullets: $PASSED_CASES"
          echo "Adding FAILED cases with bullets: $FAILED_CASES"
          echo "Adding SKIPPED cases with bullets: $SKIPPED_CASES"
          PASSED_CASES_BULLETS=$(echo "$PASSED_CASES" | awk '{printf "    • %s\n", $0}')
          FAILED_CASES_BULLETS=$(echo "$FAILED_CASES" | awk '{printf "    • %s\n", $0}')
          SKIPPED_CASES_BULLETS=$(echo "$SKIPPED_CASES" | awk '{printf "    • %s\n", $0}')
          echo "PASSED cases with bullets: $PASSED_CASES_BULLETS"
          echo "FAILED cases with bullets: $FAILED_CASES_BULLETS"
          echo "SKIPPED cases with bullets: $SKIPPED_CASES_BULLETS"
          echo "TOTAL_TESTS=${TOTAL_TESTS}"
          echo "PASSED_TESTS=${PASSED_TESTS}"
          echo "FAILED_TESTS=${FAILED_TESTS}"
          echo "SKIPPED_TESTS=${SKIPPED_TESTS}"
          echo "PASSED_CASES=${PASSED_CASES}"
          echo "FAILED_CASES=${FAILED_CASES}"
          echo "SKIPPED_CASES=${SKIPPED_CASES}"
          echo "PASSED_TESTS=${PASSED_TESTS}" >> $GITHUB_ENV
          echo "FAILED_TESTS=${FAILED_TESTS}" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=${SKIPPED_TESTS}" >> $GITHUB_ENV
          echo "TOTAL_TESTS=${TOTAL_TESTS}" >> $GITHUB_ENV
          echo "PASSED_CASES<<EOF" >> $GITHUB_ENV
          echo "${PASSED_CASES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FAILED_CASES<<EOF" >> $GITHUB_ENV
          echo "${FAILED_CASES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "SKIPPED_CASES<<EOF" >> $GITHUB_ENV
          echo "${SKIPPED_CASES}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "PASSED_CASES_BULLETS<<EOF" >> $GITHUB_ENV
          echo "${PASSED_CASES_BULLETS}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "FAILED_CASES_BULLETS<<EOF" >> $GITHUB_ENV
          echo "${FAILED_CASES_BULLETS}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "SKIPPED_CASES_BULLETS<<EOF" >> $GITHUB_ENV
          echo "${SKIPPED_CASES_BULLETS}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Slack Notification
        if: always() && (github.event_name == 'schedule' || env.send_slack_notification == 'true')
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          RUN_ID: ${{ github.run_id }}
          PASSED_TESTS: ${{ env.PASSED_TESTS }}
          FAILED_TESTS: ${{ env.FAILED_TESTS }}
          TOTAL_TESTS: ${{ env.TOTAL_TESTS }}
          PASSED_CASES: ${{ env.PASSED_CASES }}
          FAILED_CASES: ${{ env.FAILED_CASES }}
          SKIPPED_CASES: ${{ env.SKIPPED_CASES }}
          PASSED_CASES_BULLETS: ${{ env.PASSED_CASES_BULLETS }}
          FAILED_CASES_BULLETS: ${{ env.FAILED_CASES_BULLETS }}
          SKIPPED_CASES_BULLETS: ${{ env.SKIPPED_CASES_BULLETS }}
          BRANCH_NAME: ${{ github.ref_name }}
          TEST_TIME_HOURS: ${{ env.TEST_TIME_HOURS }}
          TEST_TIME_MINS: ${{ env.TEST_TIME_MINS }}
          TEST_TIME_SECS: ${{ env.TEST_TIME_SECS }}
          NDCS: ${{ github.event.inputs.ndcs || 1 }}
          NPCS: ${{ github.event.inputs.npcs || 1 }}
          BS: ${{ github.event.inputs.bs || 4096 }}
          CHUNK_BS: ${{ github.event.inputs.chunk_bs || 4096 }}
        run: |
          GITHUB_RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${RUN_ID}"
          LOGS_URL="http://192.168.10.164:9001/browser/e2e-run-logs/${RUN_ID}%2F"
          if [[ ${{ job.status }} == 'success' ]]; then
            OVERALL_STATUS=":white_check_mark: Overall Status: SUCCESS"
          else
            OVERALL_STATUS=":x: Overall Status: FAILURE <!channel>"
          fi

          TIME_TAKEN="${TEST_TIME_HOURS}h ${TEST_TIME_MINS}m ${TEST_TIME_SECS}s"
          COMMIT_SHA=$(git rev-parse --short HEAD)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')

          MESSAGE="Python E2E tests run triggered on branch *${BRANCH_NAME}* at ${COMMIT_SHA} by ${COMMIT_AUTHOR}. \nTotal Time Taken to run the tests: ${TIME_TAKEN}. \n\n${OVERALL_STATUS}\nGitHub Run: ${GITHUB_RUN_URL}\nAWS Logs: ${LOGS_URL}\n\n*Configuration*: *NDCS: ${NDCS}, NPCS: ${NPCS}, Block Size: ${BS}, Chunk Block Size: ${CHUNK_BS}*\n\nTotal Tests: *${TOTAL_TESTS}*, Passed Tests: *${PASSED_TESTS}*, Failed Tests: *${FAILED_TESTS}*\n\n-- Test Cases Passed :white_check_mark:\n${PASSED_CASES_BULLETS}\n\n-- Test Cases Failed :x:\n${FAILED_CASES_BULLETS}\n\n-- Test Cases Skipped :x:\n${SKIPPED_CASES_BULLETS}"

          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"${MESSAGE}\"}" $SLACK_WEBHOOK_URL

      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
